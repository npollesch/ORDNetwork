
## Groups of at most two different sizes
## number of groups as close to number of group members as possible
group.size<-function(x,n=NA,quiet=F){
  if(!is.na(n)){
    extras<-x%%n
    if(extras==0){if(!quiet){print(paste(n," of ",x/n))}
      return(c(n,x/n))}
    if(extras>0){if(!quiet){print(paste(n-x%%n," of ",x%/%n," | ",x%%n, " of ",(x%/%n)+1))}
      return(rbind(c(n-x%%n,x%/%n),c(x%%n,(x%/%n)+1)))}
  }
  potgsize<-c(floor(sqrt(x)),ceiling(sqrt(x)))
  if(potgsize[1]==potgsize[2]){
    if(!quiet){print(paste(potgsize[1]," of ",potgsize[1]))}
    return(c(potgsize[1],potgsize[1]))}
  ifelse(sqrt(x)<mean(potgsize),gs<-potgsize[1],gs<-potgsize[2])
  extras<-x-gs*floor(sqrt(x))
  regs<-(x-(gs+1)*extras)/gs
  if(regs==0){
    if(!quiet){print(paste(extras," of ",gs+1))}
    return(c(extras,gs+1))}
  if(regs>0){if(!quiet){print(paste((x-(gs+1)*extras)/gs," of ",gs," | ",extras, " of ",gs+1))}
    return(rbind(c(regs,gs),c(extras,gs+1)))}
}

## returns number of edges that get to be placed based on group sizes
group.edges.total<-function(x){
  y<-ifelse(!is.null(dim(x)),sum(choose(x[,2],2)*x[,1]),choose(x[2],2)*x[1])  
  return(y)
}

## Creates groups specified by groups argument based on group.size, graph, and method=c("random","greedy","shy")
create.groups<-function(graph,method,noGroups=NA,all=F,quiet=T){
GOutC<-list()
GOutAll<-list()
if(!is.na(noGroups)){if(noGroups==1){print("Umm, it's one big group, but here you go!")
method="random"}
if(noGroups==length(V(graph))){
  print("The cheeses all stand alone. Input graph returned")
  return(graph)}}
groups<-group.size(length(V(graph)),noGroups,quiet)
peeps<-ifelse(is.null(dim(groups)),groups[1]*groups[2],(groups[1,1]*groups[1,2]+groups[2,1]*groups[2,2]))
#if(peeps!=length(V(graph))){return(print("Total nodes from 'groups' doesn't match total nodes in 'graph'"))}
  if(method=="random"){
    if(all){print("Random grouping isn't sequential, returning cumulative group graphs")}
  shuffle<-sample(1:peeps,peeps,replace=F)
  newEdges<-list()
  if(is.null(dim(groups))){
    grpMat<-matrix(shuffle[1:peeps],nrow=groups[1])
    for(i in 1:groups[1]){
      newEdges[[i]]<-as.vector(combn(grpMat[i,],2))}
  }
  if(!is.null(dim(groups))){
    grpMat1<-matrix(shuffle[1:(groups[1,1]*groups[1,2])],nrow=groups[1,1])
    grpMat2<-matrix(shuffle[((groups[1,1]*groups[1,2])+1):peeps],nrow=groups[2,1])
    for(i in 1:groups[2,1]){
      newEdges[[i]]<-as.vector(combn(grpMat2[i,],2))}
    if(groups[1,2]==1){for(j in 1:groups[1,1]){
        newEdges[[(j+groups[2,1])]]<-c()}}
    if(groups[1,2]>1){for(j in 1:groups[1,1]){
      newEdges[[(j+groups[2,1])]]<-as.vector(combn(grpMat1[j,],2))}}
  }
  
GOutC[[1]]<-graph
  for(i in 1:length(newEdges)){
    for(j in 1:i){
      GOutC[[i+1]]<-add.edges(GOutC[[i]],newEdges[[j]],color=rainbow(length(newEdges))[j])
      V(GOutC[[i+1]])$color[which(V(GOutC[[i+1]])%in%newEdges[[j]])]<-rainbow(length(newEdges))[j]
      V(GOutC[[i+1]])$grp[which(V(GOutC[[i+1]])%in%newEdges[[j]])]<-j}
  }
  return(GOutC)
  
  }
if(method=="greedy"){
  if(!is.null(dim(groups))){
  film<-list()
  series<-list()
  career<-list()
  bacon<-c()
  series[[1]]<-graph
  for(j in 1:(sum(groups[,1]))){
    if(j<groups[2,1]+1){
      for(i in 1:(groups[2,2]-1)){
        if(i==1){
          coStar<-c()
          cast<-list()
          career[[((j-1)*groups[2,2])+i]]<-film[[i]]<-series[[j]]
          ## Randomly choose a node *Bacon* that has an edge with maximal distance that is also not in a grp to build around
          bacon[j]<-sample(intersect(names(V(film[[i]])[is.na(V(film[[i]])$grp)]),names(which(distances(film[[i]])==max(distances(film[[i]])),arr.ind=T)[,1])),1)}
        ## Randomly choose a node that is maximally distant from bacon
        coStar[i]<-sample(names(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))[1,])[which(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))==max(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))))],1)
        ## Add the newly chosen coStar to the cast
        cast[[i]]<-c(bacon[j],coStar)
        V(film[[i]])$grp[match(cast[[i]],V(film[[i]])$name)]<-rep(j,length(cast[[i]]))
        V(film[[i]])$color[match(cast[[i]],V(film[[i]])$name)]<-rep(rainbow(sum(groups[1,]))[j],length(cast[[i]]))
        film[[i+1]]<-simplify(add.edges(film[[i]],as.vector(combn(cast[[i]],2)),color=rainbow(sum(groups[1,]))[j]),edge.attr.comb="first")
        career[[(((j-1)*groups[2,2])+i)+1]]<-film[[i+1]]}
      if(i==(groups[2,2]-1)){series[[j+1]]<-film[[i+1]]}}
    if(j>groups[2,1]){
      if(groups[1,2]==1){
        break
      }
      for(i in 1:(groups[1,2]-1)){
        if(i==1){
          coStar<-c()
          cast<-list()
          career[[((j-1)*groups[1,2])+i]]<-film[[i]]<-series[[j]]
          ## Randomly choose a node *Bacon* that has an edge with maximal distance that is also not in a grp to build around
          bacon[j]<-sample(intersect(names(V(film[[i]])[is.na(V(film[[i]])$grp)]),names(which(distances(film[[i]])==max(distances(film[[i]])),arr.ind=T)[,1])),1)}
        ## Randomly choose a node that is maximally distant from bacon
        ifelse(j==sum(groups[,1]) && i==(groups[1,2]-1),coStar[i]<-names(V(film[[i]])[is.na(V(film[[i]])$grp)]),
               coStar[i]<-sample(names(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))[1,])[which(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))==max(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))))],1))
        ## Add the newly chosen coStar to the cast
        cast[[i]]<-c(bacon[j],coStar)
        V(film[[i]])$grp[match(cast[[i]],V(film[[i]])$name)]<-rep(j,length(cast[[i]]))
        V(film[[i]])$color[match(cast[[i]],V(film[[i]])$name)]<-rep(rainbow(sum(groups[1,]))[j],length(cast[[i]]))
        film[[i+1]]<-simplify(add.edges(film[[i]],as.vector(combn(cast[[i]],2)),color=rainbow(sum(groups[1,]))[j]),edge.attr.comb="first")
        career[[(((j-1)*groups[1,2])+i)+1]]<-film[[i+1]]}
      if(i==(groups[1,2]-1)){series[[j+1]]<-film[[i+1]]}}
    }
  if(all){return(career)}
  if(!all){return(series)}
  }
  if(is.null(dim(groups))){
    film<-list()
    series<-list()
    career<-list()
    bacon<-c()
    series[[1]]<-graph
    for(j in 1:(groups[1])){
        for(i in 1:(groups[2]-1)){
          if(i==1){
            coStar<-c()
            cast<-list()
            career[[((j-1)*groups[2])+i]]<-film[[i]]<-series[[j]]
            ## Randomly choose a node *Bacon* that has an edge with maximal distance that is also not in a grp to build around
            bacon[j]<-sample(intersect(names(V(film[[i]])[is.na(V(film[[i]])$grp)]),names(which(distances(film[[i]])==max(distances(film[[i]])),arr.ind=T)[,1])),1)}
          ## Randomly choose a node that is maximally distant from bacon
          ifelse(j==groups[1] && i==(groups[2]-1),coStar[i]<-names(V(film[[i]])[is.na(V(film[[i]])$grp)]),
                 coStar[i]<-sample(names(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))[1,])[which(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))==max(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))))],1))
          ## Add the newly chosen coStar to the cast
          cast[[i]]<-c(bacon[j],coStar)
          V(film[[i]])$grp[match(cast[[i]],V(film[[i]])$name)]<-rep(j,length(cast[[i]]))
          V(film[[i]])$color[match(cast[[i]],V(film[[i]])$name)]<-rep(rainbow(groups[1])[j],length(cast[[i]]))
          film[[i+1]]<-simplify(add.edges(film[[i]],as.vector(combn(cast[[i]],2)),color=rainbow(groups[1])[j]),edge.attr.comb="first")
          career[[(((j-1)*groups[2])+i)+1]]<-film[[i+1]]}
        if(i==(groups[2]-1)){series[[j+1]]<-film[[i+1]]}}
  if(all){return(career)}
  if(!all){return(series)}
    }
  }
  if(method=="shy"){
  if(!is.null(dim(groups))){
    film<-list()
    series<-list()
    career<-list()
    bacon<-c()
    series[[1]]<-graph
    for(j in 1:(sum(groups[,1]))){
      if(j<groups[2,1]+1){
        for(i in 1:(groups[2,2]-1)){
          if(i==1){
            coStar<-c()
            cast<-list()
            career[[((j-1)*groups[2,2])+i]]<-film[[i]]<-series[[j]]
            ## Randomly choose a node *Bacon* that has an edge with maximal distance that is also not in a grp to build around
            bacon[j]<-sample(intersect(names(V(film[[i]])[is.na(V(film[[i]])$grp)]),names(which(distances(film[[i]])==min(distances(film[[i]])),arr.ind=T)[,1])),1)
            V(film[[i]])$grp[match(bacon[j],V(film[[i]])$name)]<-j}
          ## Randomly choose a node that is minimally distant from bacon
          coStar[i]<-sample(names(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))[1,])[which(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))==min(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))))],1)
          ## Add the newly chosen coStar to the cast
          cast[[i]]<-c(bacon[j],coStar)
          V(film[[i]])$grp[match(cast[[i]],V(film[[i]])$name)]<-rep(j,length(cast[[i]]))
          V(film[[i]])$color[match(cast[[i]],V(film[[i]])$name)]<-rep(rainbow(sum(groups[1,]))[j],length(cast[[i]]))
          film[[i+1]]<-simplify(add.edges(film[[i]],as.vector(combn(cast[[i]],2)),color=rainbow(sum(groups[1,]))[j]),edge.attr.comb="first")
          career[[(((j-1)*groups[2,2])+i)+1]]<-film[[i+1]]}
        if(i==(groups[2,2]-1)){series[[j+1]]<-film[[i+1]]}}
      if(j>groups[2,1]){
        if(groups[1,2]==1){
          break
        }
        for(i in 1:(groups[1,2]-1)){
          if(i==1){
            coStar<-c()
            cast<-list()
            career[[((j-1)*groups[1,2])+i]]<-film[[i]]<-series[[j]]
            ## Randomly choose a node *Bacon* that has an edge with maximal distance that is also not in a grp to build around
            bacon[j]<-sample(intersect(names(V(film[[i]])[is.na(V(film[[i]])$grp)]),names(which(distances(film[[i]])==min(distances(film[[i]])),arr.ind=T)[,1])),1)
            V(film[[i]])$grp[match(bacon[j],V(film[[i]])$name)]<-j}
          ## Randomly choose a node that is minimally distant from bacon
          ifelse(j==sum(groups[,1]) && i==(groups[1,2]-1),coStar[i]<-names(V(film[[i]])[is.na(V(film[[i]])$grp)]),
                 coStar[i]<-sample(names(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))[1,])[which(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))==min(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))))],1))
          ## Add the newly chosen coStar to the cast
          cast[[i]]<-c(bacon[j],coStar)
          V(film[[i]])$grp[match(cast[[i]],V(film[[i]])$name)]<-rep(j,length(cast[[i]]))
          V(film[[i]])$color[match(cast[[i]],V(film[[i]])$name)]<-rep(rainbow(sum(groups[1,]))[j],length(cast[[i]]))
          film[[i+1]]<-simplify(add.edges(film[[i]],as.vector(combn(cast[[i]],2)),color=rainbow(sum(groups[1,]))[j]),edge.attr.comb="first")
          career[[(((j-1)*groups[1,2])+i)+1]]<-film[[i+1]]}
        if(i==(groups[1,2]-1)){series[[j+1]]<-film[[i+1]]}}
    }
    if(all){return(career)}
    if(!all){return(series)}
  }
  if(is.null(dim(groups))){
    film<-list()
    series<-list()
    career<-list()
    bacon<-c()
    series[[1]]<-graph
    for(j in 1:(groups[1])){
      for(i in 1:(groups[2]-1)){
        if(i==1){
          coStar<-c()
          cast<-list()
          career[[((j-1)*groups[2])+i]]<-film[[i]]<-series[[j]]
          ## Randomly choose a node *Bacon* that has an edge with maximal distance that is also not in a grp to build around
          bacon[j]<-sample(intersect(names(V(film[[i]])[is.na(V(film[[i]])$grp)]),names(which(distances(film[[i]])==min(distances(film[[i]])),arr.ind=T)[,1])),1)
          V(film[[i]])$grp[match(bacon[j],V(film[[i]])$name)]<-j}
        ## Randomly choose a node that is maximally distant from bacon
        ifelse(j==groups[1] && i==(groups[2]-1),coStar[i]<-names(V(film[[i]])[is.na(V(film[[i]])$grp)]),
               coStar[i]<-sample(names(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))[1,])[which(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))==max(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))))],1))
        ## Add the newly chosen coStar to the cast
        cast[[i]]<-c(bacon[j],coStar)
        V(film[[i]])$grp[match(cast[[i]],V(film[[i]])$name)]<-rep(j,length(cast[[i]]))
        V(film[[i]])$color[match(cast[[i]],V(film[[i]])$name)]<-rep(rainbow(groups[1])[j],length(cast[[i]]))
        film[[i+1]]<-simplify(add.edges(film[[i]],as.vector(combn(cast[[i]],2)),color=rainbow(groups[1])[j]),edge.attr.comb="first")
        career[[(((j-1)*groups[2])+i)+1]]<-film[[i+1]]}
      if(i==(groups[2]-1)){series[[j+1]]<-film[[i+1]]}}
    if(all){return(career)}
    if(!all){return(series)}
  }
  }

}


## Number of edges by group size
group.edges.count.plot<-function(totalNodes,quiet=T,plotted=T,...){
ae<-c()
  for(i in 1:totalNodes){
  ae[i]<-group.edges.total(group.size(totalNodes,i,quiet=T))}
if(plotted){plot(ae,...)
abline(h=group.edges.total(group.size(totalNodes,quiet=T)),col="steelblue")}
return(ae)}



