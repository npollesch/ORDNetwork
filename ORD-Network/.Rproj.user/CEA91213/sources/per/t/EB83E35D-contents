### 
## ORD - PROPOSED REORGANIZATION NETWORK
## This R Script has been created to investigate the network
## Structure of the proposed ORD reorganization
### 
## N.L. Pollesch - pollesch.nathan@epa.gov - ORD/NHEERL/MED

#### Packages and such ####
library(igraph)
library(stringr)
library(readxl)
library(ggraph)


#### Create Network ####
## Load Reorg Edge List Workbook
ORD_REORG <- read_excel("data/ORD-REORG.xlsx") #NLP Created this file by hand from https://intranet.ord.epa.gov/about-ord/proposed-reorganization 

## Extract Edge List Object
ORDEL<-as.data.frame(ORD_REORG[,1:2])

## Create igraph object
ORD<-graph_from_edgelist(as.matrix(ORDEL))

## View in igraph
set.seed(1)
par(bg="Black")
plot(ORD)


## Create short names
V(ORD)$longName<-V(ORD)$name
for(i in 1:length(V(ORD))){
  V(ORD)$shortName[i]<-strsplit(V(ORD)$name,split="-")[[i]][V(ORD)$CDB[i]]
}

## Assign Center/Division/Branch status
## 1=Center 2=Div 3=Branch ##NOTE THIS IS BASICALLY 'DEPTH' IN TREE
V(ORD)$CDB<-str_count(names(V(ORD)),"-")+1 

## Find All Branches
V(ORD)[which(V(ORD)$CDB==2)]
## Find Divisions with most branches and sort
rev(sort(degree(ORD,V(ORD)[which(V(ORD)$CDB==2)],mode="out")))

### Calculate centers with most branches
##
brByCen<-list()
noBrByCen<-c()
for(i in 2:length(names(V(ORD)[which(V(ORD)$CDB==1)]))){
  brByCen[[i-1]]<-grep(names(V(ORD)[which(V(ORD)$CDB==1)])[i],names(degree(ORD,V(ORD)[which(V(ORD)$CDB==2)],mode="out")))}
names(brByCen)<-names(V(ORD)[which(V(ORD)$CDB==1)])[2:8]

for(i in 1:length(divByCen)){
  noBrByCen[i]<-sum(degree(ORD,V(ORD)[which(V(ORD)$CDB==2)],mode="out")[brByCen[[i]]])  
}
names(noBrByCen)<-names(brByCen)

### Calculate divisions with the most branchs
##
brByDiv<-list()
noBrByDiv<-c()
for(i in 1:length(names(V(ORD)[which(V(ORD)$CDB==2)]))){
  brByDiv[[i]]<-grep(names(V(ORD)[which(V(ORD)$CDB==2)])[i],names(degree(ORD,V(ORD)[which(V(ORD)$CDB==2)],mode="out")))}
names(brByDiv)<-names(V(ORD)[which(V(ORD)$CDB==2)])

for(i in 1:length(brByDiv)){
  noBrByDiv[i]<-sum(degree(ORD,V(ORD)[which(V(ORD)$CDB==2)],mode="out")[brByDiv[[i]]])  
}
names(noBrByDiv)<-names(brByDiv)

noBrByCen
noBrByDiv

View(distances(ORD))


## Assign colors by C/D/B
CDBcols<-c("seagreen","springgreen","turquoise")
V(ORD)$color<-CDBcols[V(ORD)$CDB]

## Assign size by C/D/B
V(ORD)$size<-(9/V(ORD)$CDB)

## Change Edge Arrow size
E(ORD)$arrow.size<-0
E(ORD)$color<-"gray"

#### Visualize ####
plot(ORD,vertex.label=V(ORD)$shortName,vertex.shape="none",
     edge.curved=.2,  vertex.label.cex=.8,
     vertex.label.color=c("SeaGreen","SpringGreen","Steelblue")[V(ORD)$CDB])

plot(ORD,vertex.label=V(ORD)$shortName,vertex.shape="none",
     edge.curved=.2,  vertex.label.cex=.8, layout=layout_as_tree,
     vertex.label.color=c("SeaGreen","SpringGreen","Steelblue")[V(ORD)$CDB])

par(bg="white")
layoutnew=layout.reingold.tilford(ORD,circular=T)
plot(ORD,vertex.label=V(ORD)$shortName,vertex.shape="none",vertex.size=12,
     edge.curved=0,layout=layoutnew, arrow.size<-0,vertex.label.cex=1/V(ORD)$CDB*.8,
     vertex.label.color=c("SeaGreen","DarkGreen","Steelblue")[V(ORD)$CDB],vertex.color=c("SeaGreen","DarkGreen","Steelblue")[V(ORD)$CDB])

par(bg="white")
layoutnew=layout.reingold.tilford(ORD,circular=T)
plot(ORD,layout=layoutnew, arrow.size<-0,vertex.label.cex=1/V(ORD)$CDB*.8,
     #label.dist=1,
     vertex.label="",
     vertex.label.color=c("SeaGreen","DarkGreen","Steelblue")[V(ORD)$CDB],vertex.color=c("SeaGreen","DarkGreen","Steelblue")[V(ORD)$CDB])



#### VISUALIZATIONS USING GGRAPH ####

ggraph(ORD, layout = 'dendrogram', circular = TRUE) + 
  geom_edge_diagonal() + 
  geom_node_point(aes(filter = leaf)) + 
  coord_fixed() + theme_void() + geom_node_point(aes(label = class))


ggraph(ORD, 'circlepack', weight = 'size') + 
  geom_node_circle(aes(fill = depth), size = 0.25, n = 50) + 
  coord_fixed()+ theme_void() 
#+ geom_node_text( aes(label=shortName, filter=leaf, fill=depth, size=size)) 

l <- ggraph(ORD, layout = 'partition', circular = TRUE)

l + geom_node_arc_bar(aes(fill = depth)) + 
  coord_fixed()

# This one takes a bit
l + geom_edge_diagonal(aes(width = ..index.., alpha = ..index..), lineend = 'round') + 
  scale_edge_width(range = c(0.2, 1.5)) + 
  geom_node_point(aes(colour = depth)) + 
  coord_fixed()+ theme_void()

# Circular Layout with Labels
myleaves=which(degree(ORD,mode="out")==0)
nleaves=length(myleaves)
V(ORD)$id[ myleaves ] = seq(1:nleaves)
V(ORD)$angle= 90 - 360 * V(ORD)$id / nleaves
# calculate the alignment of labels: right or left
# If I am on the left part of the plot, my labels have currently an angle < -90
V(ORD)$hjust<-ifelse( V(ORD)$angle < -90, 1, 0)
# flip angle BY to make them readable
V(ORD)$angle<-ifelse(V(ORD)$angle < -90, V(ORD)$angle+180, V(ORD)$angle)
# angles for all non-leaves
V(ORD)$angle[which(is.na(V(ORD)$angle))]<-0

ggraph(ORD, layout = 'dendrogram',circular=T) + 
  geom_edge_link(color="gray") +
  geom_node_point(aes(colour=color, shape="circle", size=1/CDB))+
  geom_node_text(aes( x = x*1.15, y=y*1.15,label=shortName, filter=leaf, angle = angle)) + theme_void() +
  geom_node_text(aes(label=shortName, filter=!leaf, angle = 0), nudge_y=.1) + theme_void() +
  expand_limits(x = c(-1.3, 1.3), y = c(-1.3, 1.3)) + 
  theme(
    legend.position="none",
    plot.margin=unit(c(0,0,0,0),"cm"))
  





#### DISTANCES ####
summary(distances(ORD))
sum(distances(ORD))
mean(distances(ORD))
table(V(ORD)$CDB)

#### GROUPING EXERCISES ####
#### RANDOM GROUPS IN ORD AND DISTANCE GAINS ####
peeps<-length(V(ORD))
g<-group.size(peeps)
newedges<-group.edges(g)

## New edges will be colored so old edges need a color attribute
E(ORD)$color<-"gray"

## Adds edges, creates graphs showing each group Graph Objects ##
ORDGroups<-list()
ORDGroups[[1]]<-ORD
for(i in 1:length(newedges)){
ORDGroups[[i+1]]<-add.edges(ORD,newedges[[i]],color=rainbow(length(newedges))[i])}

## Cumulative ORD connectivity gains based on random grouping
## Create cumulative group networks by adding edges
ORDAll<-list()
ORDAll[[1]]<-ORD
for(i in 1:length(newedges)){
  for(j in 1:i){
    ORDAll[[i+1]]<-add.edges(ORDAll[[i]],newedges[[j]],color=rainbow(length(newedges))[j])}
  }

## Plot cumulative edges and print distances in graph
par(bg="White")
plot(ORDAll[[1]],vertex.label=V(ORD)$shortName,vertex.size=10,layout=layoutnew,vertex.label.cex=.5)

for(i in 1:12){
plot(ORDAll[[i]],vertex.label="",layout=layoutnew)
  print(mean(distances(ORDAll[[i]])))}

for(i in 1:12){
plot(ORDAll[[i]],vertex.label="")}

#### HERE! Need to loop and track connectivity gains for each random realization (distribution on Gains) ####

#### TRY FOR A GREEEEEEDY ALGORITHM ####
## Use distance matrix, select randomly an edge with a distance of 6, add it
gs<-group.size(peeps)

film<-list()
series<-list()
career<-list()
bacon<-c()
series[[1]]<-ORD
for(j in 1:(sum(gs[,1]))){
  if(j<gs[2,1]+1){
  for(i in 1:(gs[2,2]-1)){
    if(i==1){
      coStar<-c()
      cast<-list()
      career[[((j-1)*gs[2,2])+i]]<-film[[i]]<-series[[j]]
      #career[[(((j-1)*gs[2,2])+i)]]<-film[[i]]
      ## Randomly choose a node *Bacon* that has an edge with maximal distance that is also not in a grp to build around
      bacon[j]<-sample(intersect(names(V(film[[i]])[is.na(V(film[[i]])$grp)]),names(which(distances(film[[i]])==max(distances(film[[i]])),arr.ind=T)[,1])),1)}
    ## Randomly choose a node that is maximally distant from bacon
    coStar[i]<-sample(names(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))[1,])[which(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))==max(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))))],1)
    ## Add the newly chosen coStar to the cast
    cast[[i]]<-c(bacon[j],coStar)
    V(film[[i]])$grp[match(cast[[i]],V(film[[i]])$name)]<-rep(j,length(cast[[i]]))
    V(film[[i]])$color[match(cast[[i]],V(film[[i]])$name)]<-rep(rainbow(sum(gs[1,]))[j],length(cast[[i]]))
    film[[i+1]]<-simplify(add.edges(film[[i]],as.vector(combn(cast[[i]],2)),color=rainbow(sum(gs[1,]))[j]),edge.attr.comb="first")
    career[[(((j-1)*gs[2,2])+i)+1]]<-film[[i+1]]}
  if(i==(gs[2,2]-1)){series[[j+1]]<-film[[i+1]]}}
if(j>gs[2,1]){
  for(i in 1:(gs[1,2]-1)){
    if(i==1){
      coStar<-c()
      cast<-list()
      career[[((j-1)*gs[1,2])+i]]<-film[[i]]<-series[[j]]
      #career[[(((j-1)*gs[2,2])+i)]]<-film[[i]]
      ## Randomly choose a node *Bacon* that has an edge with maximal distance that is also not in a grp to build around
      bacon[j]<-sample(intersect(names(V(film[[i]])[is.na(V(film[[i]])$grp)]),names(which(distances(film[[i]])==max(distances(film[[i]])),arr.ind=T)[,1])),1)}
    ## Randomly choose a node that is maximally distant from bacon
    ifelse(j==sum(gs[,1]) && i==(gs[1,2]-1),coStar[i]<-names(V(film[[i]])[is.na(V(film[[i]])$grp)]),
    coStar[i]<-sample(names(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))[1,])[which(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))==max(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))))],1))
    ## Add the newly chosen coStar to the cast
    cast[[i]]<-c(bacon[j],coStar)
    V(film[[i]])$grp[match(cast[[i]],V(film[[i]])$name)]<-rep(j,length(cast[[i]]))
    V(film[[i]])$color[match(cast[[i]],V(film[[i]])$name)]<-rep(rainbow(sum(gs[1,]))[j],length(cast[[i]]))
    film[[i+1]]<-simplify(add.edges(film[[i]],as.vector(combn(cast[[i]],2)),color=rainbow(sum(gs[1,]))[j]),edge.attr.comb="first")
    career[[(((j-1)*gs[1,2])+i)+1]]<-film[[i+1]]}
  if(i==(gs[1,2]-1)){series[[j+1]]<-film[[i+1]]}}
}


for(i in 1:(length(series)+1)){
  #plot(series[[i]],vertex.label="",edge.color="gray")
  plot(series[[i]],vertex.label="",layout=layoutnew)
  print(mean(distances(series[[i]])))
}


## VISUALIZATION OF GROUPS BY SIZES GROWING LARGER ##
V(series[[12]])$sizei<-V(series[[12]])$size
for(i in 0:11){
V(series[[12]])$sizei[which(V(series[[12]])$grp==i)]<-15
set.seed(12)
plot(series[[12]],layout=layoutnew,vertex.label="",edge.color=NA,vertex.size=V(series[[12]])$sizei)}


#### CLOSE TO HOME ####

#### TRY FOR A "I DON'T LIKE STRANGERS ALGORITHM ####
## Use distance matrix, select randomly an edge with a distance of 6, add it
gs<-group.size(peeps)

film<-list()
series<-list()
career<-list()
bacon<-c()
series[[1]]<-ORD
for(j in 1:(sum(gs[,1]))){
  if(j<gs[2,1]+1){
    for(i in 1:(gs[2,2]-1)){
      if(i==1){
        coStar<-c()
        cast<-list()
        career[[((j-1)*gs[2,2])+i]]<-film[[i]]<-series[[j]]
        #career[[(((j-1)*gs[2,2])+i)]]<-film[[i]]
        ## Randomly choose a node *Bacon* that has an edge with maximal distance that is also not in a grp to build around
        bacon[j]<-sample(intersect(names(V(film[[i]])[is.na(V(film[[i]])$grp)]),names(which(distances(film[[i]])==min(distances(film[[i]])),arr.ind=T)[,1])),1)}
      ## Randomly choose a node that is maximally distant from bacon
      coStar[i]<-sample(names(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))[1,])[which(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))==min(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))))],1)
      ## Add the newly chosen coStar to the cast
      cast[[i]]<-c(bacon[j],coStar)
      V(film[[i]])$grp[match(cast[[i]],V(film[[i]])$name)]<-rep(j,length(cast[[i]]))
      V(film[[i]])$color[match(cast[[i]],V(film[[i]])$name)]<-rep(rainbow(sum(gs[1,]))[j],length(cast[[i]]))
      film[[i+1]]<-simplify(add.edges(film[[i]],as.vector(combn(cast[[i]],2)),color=rainbow(sum(gs[1,]))[j]),edge.attr.comb="first")
      career[[(((j-1)*gs[2,2])+i)+1]]<-film[[i+1]]}
    if(i==(gs[2,2]-1)){series[[j+1]]<-film[[i+1]]}}
  if(j>gs[2,1]){
    for(i in 1:(gs[1,2]-1)){
      if(i==1){
        coStar<-c()
        cast<-list()
        career[[((j-1)*gs[1,2])+i]]<-film[[i]]<-series[[j]]

        ## Randomly choose a node *Bacon* that has an edge with maximal distance that is also not in a grp to build around
        bacon[j]<-sample(intersect(names(V(film[[i]])[is.na(V(film[[i]])$grp)]),names(which(distances(film[[i]])==min(distances(film[[i]])),arr.ind=T)[,1])),1)}
      ## Randomly choose a node that is maximally distant from bacon
      ifelse(j==sum(gs[,1]) && i==(gs[1,2]-1),coStar[i]<-names(V(film[[i]])[is.na(V(film[[i]])$grp)]),
             coStar[i]<-sample(names(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))[1,])[which(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))==min(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))))],1))
      ## Add the newly chosen coStar to the cast
      cast[[i]]<-c(bacon[j],coStar)
      V(film[[i]])$grp[match(cast[[i]],V(film[[i]])$name)]<-rep(j,length(cast[[i]]))
      V(film[[i]])$color[match(cast[[i]],V(film[[i]])$name)]<-rep(rainbow(sum(gs[1,]))[j],length(cast[[i]]))
      film[[i+1]]<-simplify(add.edges(film[[i]],as.vector(combn(cast[[i]],2)),color=rainbow(sum(gs[1,]))[j]),edge.attr.comb="first")
      career[[(((j-1)*gs[1,2])+i)+1]]<-film[[i+1]]}
    if(i==(gs[1,2]-1)){series[[j+1]]<-film[[i+1]]}}
}
length(career)
coStar[i]
table(V(series[[12]])$grp)
names(V(film[[i]])[is.na(V(film[[i]])$grp)])

names(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))[1,])[which(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))==min(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))))]
names(distances(film[[i]],v=bacon[j],to=is.na(V(film[[i]])$grp))[1,])

+for(i in 1:(length(career)+1)){
  #plot(series[[i]],vertex.label="",edge.color="gray")
  plot(career[[i]],vertex.label="",layout=layoutnew)
}




V(series[[12]])$sizei<-V(series[[12]])$size
for(i in 0:11){
  V(series[[12]])$sizei[which(V(series[[12]])$grp==i)]<-15
  set.seed(12)
  plot(series[[12]],layout=layoutnew,vertex.label="",edge.color=NA,vertex.size=V(series[[12]])$sizei)
  }



#### COMPARE MEAN DISTANCES #### 

mdR<-c()
mdG<-c()
mdC<-c()
for(i in 1:12){
  mdR[i]<-mean(distances(ORDAll[[i]]))
  mdC[i]<-mean(distances(series[[i]]))
  }

dev.off()
plot(mdR,type="l")
points(mdG,type="l",col="red")
points(mdC,type="l",col="blue")

par(bg="black")
for(i in 1:length(career)){
plot.igraph(career[[i]],vertex.label="",edge.color=NA)
print(mean(distances(career[[i]])))}


#### EXTRAS ####

## Cluster by short random walks
wc<-cluster_walktrap(ORD)
members<-membership(wc)
ORD_wc<-igraph_to_networkD3(ORD,group=members)
forceNetwork(Links=ORD_wc$links,Nodes=ORD_wc$nodes,NodeID='name',Group='group')


#### Make trees ####
d=depth=2
w=width=2
plot(make_tree(sum(w^(0:d)),w))


#### ANIMATE THE NETWORK ####
####~~~ Animation of AOPwiki Growth ####
library(magick)
library(dplyr)
library(purrr)
##Formatting outputs
library(stringr) #supplies a function to add leading zeros to strings (used in the plotting commands)
library(latex2exp) #Allows for TeX commands in plots 
##Library for 3d plotting
library(plot3D)

##Constructive plot of AOPwiki network 
#define layout for network
set.seed(1)
fulllo<-layout.fruchterman.reingold(AOPg)
## Loop for creating successive plots
for(i in 1:153){
  V(isgs[[153]])$color<-NA
  V(isgs[[153]])[!is.na(match(V(isgs[[153]])$KE_EID,V(isgs[[i]])$KE_EID))]$color<-'blue'
  E(isgs[[153]])$color<-NA
  E(isgs[[153]])[match(as_ids(E(isgs[[i]])),as_ids(E(isgs[[153]])))]$color<-'white'
  png(paste("images/networks/net_",str_pad(i, width=3, side="left", pad="0"),".png",sep=""),wid=800,hei=800)
  par(col.main="white",bg="black")
  plot(isgs[[153]],margin=c(-.05,-.05,-.05,-.05),layout=fulllo,vertex.label=NA, vertex.frame.color=NA, edge.arrow.size=.5,vertex.size=2,main="AOPwiki Network Evolution")
  text(0,y=-1.1,paste("-- Network Summary -- \n Key Events:",KEno[i]," Key Event Relationships:",KERno[i]," Linear AOPs:",AOPno[i]),font=2,col="white")
  dev.off()
}


list.files(path=paste(getwd(),"/images/networks",sep=""),pattern="*.png",full.names=T) %>%
  map(image_read) %>%
  image_join() %>%
  image_animate(fps=4,loop=1) %>%
  image_write("images/net_evolution.gif")

## Plot of all AOPwiki sub-networks, does not maintain layout...previous plots do maintain layout
for(i in 1:153){
  png(paste("images/networks/net_",str_pad(i, width=3, side="left", pad="0"),".png",sep=""))
  aplot(isgs[[i+1]],vsize=2)
  dev.off()
}
list.files(path=paste(getwd(),"/images/networks",sep=""),pattern="*.png",full.names=T) %>%
  map(image_read) %>%
  image_join() %>%
  image_animate(fps=4) %>%
  image_write("images/nets.gif")




